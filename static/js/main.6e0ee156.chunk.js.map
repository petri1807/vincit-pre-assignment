{"version":3,"sources":["components/LocalStorage/localStorageHandler.js","components/FileInput/FileInput.js","components/DateInput/DateInput.js","components/RadioSelection/RadioSelection.js","components/Chart/Chart.js","components/BusinessLogic/BusinessLogic.js","App.js","reportWebVitals.js","index.js"],"names":["storeStartDateStateInLocalStorage","date","localStorage","setItem","JSON","stringify","storeEndDateStateInLocalStorage","clearLocalStorage","clear","FileInput","handler","className","onFileLoaded","data","fileInfo","onClick","name","DateInput","label","list","onChangeHandler","selectedDate","labelMessage","htmlFor","id","onChange","map","value","selected","RadioSelection","type","defaultChecked","Chart","dataSet","category","length","item","toFixed","sortByOpeningPriceSMA","arr","fiveDayIncrements","i","push","inc","high","low","openingPrice","Number","replace","N1","N2","N3","N4","SMA5","differenceInPercentage","Math","max","min","calculateSMA","sort","a","b","App","useState","storage","getItem","parse","csv","getRawCSVStateFromLocalStorage","rawCSV","setRawCSV","array","getDateRangeStateFromLocalStorage","dateRange","setDateRange","volumeList","setVolumeList","priceChangeList","setPriceChangeList","openingList","setOpeningList","bullishTrend","setBullishTrend","getStartDateStateFromLocalStorage","startDate","setStartDate","getEndDateStateFromLocalStorage","endDate","setEndDate","openingError","setOpeningError","radioSelection","setRadioSelection","updateDateRange","updated","filter","Date","useEffect","bullishResponse","days","started","ended","priceResponse","volumeResponse","openingResponse","dataObjects","reverse","closingPrice","price","currentClosingPrice","oneDatePriorClosingPrice","twoDatesPriorClosingPrice","currentDate","previousDate","newStartingDate","newEndingDate","bullishTrends","calculateDays","endDateInMS","setDate","getDate","startDateInMS","ceil","calculateBullishTrend","sortByTradingVolume","close","volume","open","highNum","lowNum","sortByPriceChange","href","slice","initialStartDate","initialEndtDate","event","target","style","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e0ee156.chunk.js","sourcesContent":["// CSV data\r\nexport const getRawCSVStateFromLocalStorage = () => {\r\n  const storage = localStorage.getItem('csvState');\r\n  if (storage) return JSON.parse(storage).csv;\r\n  return null;\r\n};\r\n\r\nexport const storeRawCSVStateInLocalStorage = (csv) => {\r\n  localStorage.setItem('csvState', JSON.stringify({ csv }));\r\n};\r\n\r\n// List status depending on user selected date range\r\nexport const getDateRangeStateFromLocalStorage = () => {\r\n  const storage = localStorage.getItem('currentListState');\r\n  if (storage) return JSON.parse(storage).array;\r\n  return null;\r\n};\r\n\r\nexport const storeDateRangeStateInLocalStorage = (array) => {\r\n  localStorage.setItem('currentListState', JSON.stringify({ array }));\r\n};\r\n\r\n// Selected start date\r\nexport const getStartDateStateFromLocalStorage = () => {\r\n  const storage = localStorage.getItem('startDate');\r\n  if (storage) return JSON.parse(storage).date;\r\n};\r\n\r\nexport const storeStartDateStateInLocalStorage = (date) => {\r\n  localStorage.setItem('startDate', JSON.stringify({ date }));\r\n};\r\n\r\n// Selected end date\r\nexport const getEndDateStateFromLocalStorage = () => {\r\n  const storage = localStorage.getItem('endDate');\r\n  if (storage) return JSON.parse(storage).date;\r\n};\r\n\r\nexport const storeEndDateStateInLocalStorage = (date) => {\r\n  localStorage.setItem('endDate', JSON.stringify({ date }));\r\n};\r\n\r\nexport const clearLocalStorage = () => {\r\n  localStorage.clear();\r\n};\r\n","import React from 'react';\r\nimport { clearLocalStorage } from '../LocalStorage/localStorageHandler';\r\nimport CSVReader from 'react-csv-reader';\r\n\r\nconst FileInput = ({ handler }) => {\r\n  return (\r\n    <section className=\"fileInput\">\r\n      <CSVReader\r\n        className=\"csvreader\"\r\n        onFileLoaded={(data, fileInfo) => {\r\n          handler(data);\r\n        }}\r\n      />\r\n      <button className=\"button\" onClick={clearLocalStorage} name=\"clear\">\r\n        Clear local storage\r\n      </button>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default FileInput;\r\n","import React from 'react';\r\nimport './DateInput.css';\r\n\r\nconst DateInput = ({ label, list, onChangeHandler, selectedDate }) => {\r\n  let labelMessage = '';\r\n  if (label === 'start') labelMessage = 'Start date: ';\r\n  if (label === 'end') labelMessage = 'End date: ';\r\n\r\n  return (\r\n    <div className=\"dateSelector\">\r\n      <label htmlFor={label}>{labelMessage}</label>\r\n      <select className=\"select\" id={label} onChange={onChangeHandler}>\r\n        {list.map(([date]) => (\r\n          // Chrome warns about using 'selected', but this is the only way I know of having the correct dates being shown\r\n          <option key={date} value={date} selected={date === selectedDate}>\r\n            {date}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DateInput;\r\n","import React from 'react';\r\nimport './RadioSelection.css';\r\n\r\nconst RadioSelection = ({ handler }) => {\r\n  return (\r\n    <div className=\"radio\" onChange={handler}>\r\n      <input\r\n        className=\"radio__input\"\r\n        type=\"radio\"\r\n        id=\"bullish\"\r\n        value=\"Bullish\"\r\n        name=\"radioGroup\"\r\n        defaultChecked\r\n      />\r\n      <label className=\"radio__label\" htmlFor=\"bullish\">\r\n        Bullish trend\r\n      </label>\r\n      <input\r\n        className=\"radio__input\"\r\n        type=\"radio\"\r\n        id=\"volume\"\r\n        value=\"Volume\"\r\n        name=\"radioGroup\"\r\n      />{' '}\r\n      <label className=\"radio__label\" htmlFor=\"volume\">\r\n        Highest volume\r\n      </label>\r\n      <input\r\n        className=\"radio__input\"\r\n        type=\"radio\"\r\n        id=\"price\"\r\n        value=\"Price\"\r\n        name=\"radioGroup\"\r\n      />{' '}\r\n      <label className=\"radio__label\" htmlFor=\"price\">\r\n        Highest price change\r\n      </label>\r\n      <input\r\n        className=\"radio__input\"\r\n        type=\"radio\"\r\n        id=\"opening\"\r\n        value=\"Opening\"\r\n        name=\"radioGroup\"\r\n      />\r\n      <label className=\"radio__label\" htmlFor=\"opening\">\r\n        Opening price\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RadioSelection;\r\n","import React from 'react';\r\nimport './Chart.css';\r\n\r\nexport default function Chart({ dataSet, category }) {\r\n  // Error handling for empty arrays\r\n  if (!dataSet.length) return <p>Chart was given an empty array</p>;\r\n\r\n  return (\r\n    <table className=\"content-table\">\r\n      <thead>\r\n        <tr>\r\n          <th>Date</th>\r\n          <th>Close/Last</th>\r\n          <th>Volume</th>\r\n          <th>Open</th>\r\n          <th>High</th>\r\n          <th>Low</th>\r\n          {category === 'price' && <th>Price change ($)</th>}\r\n          {category === 'opening' && <th>Price change (%)</th>}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {dataSet.map((item) => (\r\n          <tr key={item[0]}>\r\n            <td>{item[0]}</td>\r\n            <td>{item[1]}</td>\r\n            <td>{item[2]}</td>\r\n            <td>{item[3]}</td>\r\n            <td>{item[4]}</td>\r\n            <td>{item[5]}</td>\r\n            {category === 'price' && <td>{item[6]}</td>}\r\n            {category === 'opening' && <td>{item[6].toFixed(3)} %</td>}\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n","export const calculateBullishTrend = (arr) => {\r\n  if (arr.length === 0) return;\r\n\r\n  // Reverse the array so we can traverse through it in ascending order, oldest date to newest\r\n  const data = [...arr].reverse();\r\n\r\n  // An array of objects makes things easier to read below, and we don't need anything else for this\r\n  const dataObjects = data.map(([date, closingPrice]) => {\r\n    return { date: date, price: Number(closingPrice.replace('$', '')) };\r\n  });\r\n\r\n  // Error handling for invalid dates and page refresh\r\n  if (!dataObjects[0]) return;\r\n\r\n  // Need to keep track of prices over the last 3 days\r\n  let currentClosingPrice = 0;\r\n  let oneDatePriorClosingPrice = 0;\r\n  let twoDatesPriorClosingPrice = 0;\r\n\r\n  let currentDate = '';\r\n  let previousDate = '';\r\n\r\n  // Initialize with first day in the array\r\n  let newStartingDate = dataObjects[0].date;\r\n  let newEndingDate = '';\r\n\r\n  let bullishTrends = [];\r\n\r\n  // Helper function\r\n  const calculateDays = () => {\r\n    // Values need to be numbers for correct evaluation, returns milliseconds since 1970(?)\r\n    let endDateInMS = new Date(newEndingDate);\r\n    // Including the last day means adding one day to it\r\n    endDateInMS.setDate(endDateInMS.getDate() + 1);\r\n    const startDateInMS = new Date(newStartingDate);\r\n\r\n    // Calculate the difference in milliseconds, then divide into full days\r\n    const differenceInDays = Math.ceil(\r\n      (endDateInMS - startDateInMS) / (1000 * 60 * 60 * 24)\r\n    );\r\n    return differenceInDays;\r\n  };\r\n\r\n  for (let i = 0; i < dataObjects.length; i++) {\r\n    currentClosingPrice = dataObjects[i].price;\r\n    currentDate = dataObjects[i].date;\r\n\r\n    if (currentClosingPrice > oneDatePriorClosingPrice) {\r\n      // First check if previous date was the start of a new bullish trend\r\n      if (oneDatePriorClosingPrice < twoDatesPriorClosingPrice) {\r\n        // If it was, now is the time to push that bullish trend to our array\r\n        bullishTrends.push({\r\n          days: calculateDays(),\r\n          started: newStartingDate,\r\n          ended: newEndingDate,\r\n        });\r\n\r\n        // Save yesterday's date as a new starting point for next trend\r\n        newStartingDate = previousDate;\r\n      }\r\n\r\n      // If we have reached the end of the array\r\n      if (i + 1 === dataObjects.length) {\r\n        newEndingDate = currentDate;\r\n        // Push the last bullish trend\r\n        bullishTrends.push({\r\n          days: calculateDays(),\r\n          started: newStartingDate,\r\n          ended: newEndingDate,\r\n        });\r\n      }\r\n\r\n      // Update the end date regardless of either if-statement passing\r\n      newEndingDate = currentDate;\r\n    }\r\n\r\n    // twoDatesPriorClosingPrice is needed for recognizing a new starting bullish date\r\n    twoDatesPriorClosingPrice = oneDatePriorClosingPrice;\r\n    // Save the current dates price as yesterday's price for next loop iteration\r\n    oneDatePriorClosingPrice = currentClosingPrice;\r\n    // Save the current date as previous date for next loop iteration\r\n    previousDate = currentDate;\r\n  }\r\n\r\n  // TODO: This needs to still sort them by latest date in the case of multiple trends being the same length\r\n  const sortedArray = [\r\n    ...bullishTrends.sort((a, b) => (a.days > b.days ? -1 : 1)),\r\n  ];\r\n\r\n  return sortedArray[0];\r\n};\r\n\r\nexport const sortByPriceChange = (arr) => {\r\n  if (arr.length === 0) return;\r\n\r\n  const list = [...arr];\r\n\r\n  // Add price differences to the array\r\n  const listWithPriceDiff = list.map(\r\n    ([date, close, volume, open, high, low]) => {\r\n      // Dump the $-sign so we can evaluate the difference\r\n      const highNum = Number(high.replace('$', ''));\r\n      const lowNum = Number(low.replace('$', ''));\r\n\r\n      // Evaluate and turn back to string with $-sign\r\n      const priceDifference = `$${(highNum - lowNum).toFixed(3)}`;\r\n\r\n      // Create a new array with price difference included\r\n      const newArray = [date, close, volume, open, high, low, priceDifference];\r\n      return newArray;\r\n    }\r\n  );\r\n\r\n  // Sort the array by price difference in descending order\r\n  const sorted = listWithPriceDiff.sort((a, b) => {\r\n    // This would be simpler with numbers to begin with\r\n    const diffA = Number(a[6].replace('$', ''));\r\n    const diffB = Number(b[6].replace('$', ''));\r\n\r\n    return diffA > diffB ? -1 : 1;\r\n  });\r\n\r\n  return sorted;\r\n};\r\n\r\nexport const sortByTradingVolume = (arr) => {\r\n  if (arr.length === 0) return;\r\n\r\n  const list = [...arr];\r\n\r\n  // Sort the array by volume in descending order\r\n  const sorted = list.sort((a, b) => {\r\n    const volumeA = Number(a[2]);\r\n    const volumeB = Number(b[2]);\r\n    return volumeA > volumeB ? -1 : 1;\r\n  });\r\n\r\n  return sorted;\r\n};\r\n\r\n// The logic here is a bit flawed as it requires an array of 6 dates minimum to calculate SMA-5,\r\n// and returns only the dates SMA-5 was calculated for, basically dumping the 5 oldest dates.\r\n// Fix by giving this an array of the selected dates plus 5 dates prior to those to calculate SMA-5 for all selected dates\r\nexport const sortByOpeningPriceSMA = (arr) => {\r\n  if (arr.length < 6) return;\r\n\r\n  const list = [...arr];\r\n\r\n  const getPercentageChange = (high, low) => {\r\n    const difference = high - low;\r\n    return (difference / high) * 100;\r\n  };\r\n\r\n  const calculateSMA = (arr) => {\r\n    if (arr.length < 6) return 'Not enough data';\r\n\r\n    const date = arr[0][0];\r\n    const openingPrice = Number(arr[0][3].replace('$', ''));\r\n    const N1 = Number(arr[1][1].replace('$', ''));\r\n    const N2 = Number(arr[2][1].replace('$', ''));\r\n    const N3 = Number(arr[3][1].replace('$', ''));\r\n    const N4 = Number(arr[4][1].replace('$', ''));\r\n    const N5 = Number(arr[5][1].replace('$', ''));\r\n\r\n    const SMA5 = (N5 + N4 + N3 + N2 + N1) / 5;\r\n\r\n    const differenceInPercentage = getPercentageChange(\r\n      Math.max(openingPrice, SMA5),\r\n      Math.min(openingPrice, SMA5)\r\n    );\r\n\r\n    return [\r\n      date,\r\n      arr[0][1],\r\n      arr[0][2],\r\n      arr[0][3],\r\n      arr[0][4],\r\n      arr[0][5],\r\n      differenceInPercentage,\r\n    ];\r\n  };\r\n\r\n  const fiveDayIncrements = [];\r\n\r\n  // Starting from the 6th day in the original array, add the date and previous 5 days as an array to fiveDayIncrements\r\n  for (let i = 5; i < list.length; i++) {\r\n    fiveDayIncrements.push([\r\n      list[i - 5],\r\n      list[i - 4],\r\n      list[i - 3],\r\n      list[i - 2],\r\n      list[i - 1],\r\n      list[i],\r\n    ]);\r\n  }\r\n\r\n  // Calculate SMA-5 and difference percentage for each date and store it in SMAList\r\n  const SMAlist = fiveDayIncrements.map((inc) => calculateSMA(inc));\r\n\r\n  // Sort by percentage in descending order\r\n  const sorted = SMAlist.sort((a, b) => (a[6] > b[6] ? -1 : 1));\r\n\r\n  return sorted;\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\n\r\n// Components\r\nimport FileInput from './components/FileInput/FileInput';\r\nimport DateInput from './components/DateInput/DateInput';\r\nimport RadioSelection from './components/RadioSelection/RadioSelection';\r\nimport Chart from './components/Chart/Chart';\r\n\r\n// Sorting & calculations\r\nimport {\r\n  calculateBullishTrend,\r\n  sortByPriceChange,\r\n  sortByTradingVolume,\r\n  sortByOpeningPriceSMA,\r\n} from './components/BusinessLogic/BusinessLogic';\r\n\r\n// Using local storage so we don't lose the file, selected dates, or the current state of the list on page reload\r\nimport {\r\n  getRawCSVStateFromLocalStorage,\r\n  getDateRangeStateFromLocalStorage,\r\n  getStartDateStateFromLocalStorage,\r\n  getEndDateStateFromLocalStorage,\r\n  storeRawCSVStateInLocalStorage,\r\n  storeDateRangeStateInLocalStorage,\r\n  storeStartDateStateInLocalStorage,\r\n  storeEndDateStateInLocalStorage,\r\n} from './components/LocalStorage/localStorageHandler';\r\n\r\nconst App = () => {\r\n  const [rawCSV, setRawCSV] = useState(getRawCSVStateFromLocalStorage());\r\n  const [dateRange, setDateRange] = useState(getDateRangeStateFromLocalStorage());\r\n  const [volumeList, setVolumeList] = useState([]);\r\n  const [priceChangeList, setPriceChangeList] = useState([]);\r\n  const [openingList, setOpeningList] = useState([]);\r\n  const [bullishTrend, setBullishTrend] = useState([]);\r\n  const [startDate, setStartDate] = useState(getStartDateStateFromLocalStorage());\r\n  const [endDate, setEndDate] = useState(getEndDateStateFromLocalStorage());\r\n  const [openingError, setOpeningError] = useState(false);\r\n  const [radioSelection, setRadioSelection] = useState('Bullish');\r\n\r\n  const startDateHandler = (event) => {\r\n    storeStartDateStateInLocalStorage(event.target.value);\r\n    setStartDate(event.target.value);\r\n  };\r\n\r\n  const endDateHandler = (event) => {\r\n    storeEndDateStateInLocalStorage(event.target.value);\r\n    setEndDate(event.target.value);\r\n  };\r\n\r\n  // Handles the CSV file\r\n  const fileHandler = (data) => {\r\n    // Tossing the labels from csv file and returning only values that matter\r\n    const list = data.slice(1);\r\n\r\n    setRawCSV(list);\r\n\r\n    // Start out with the previous 5 dates showing\r\n    const initialStartDate = list[4][0];\r\n    const initialEndtDate = list[0][0];\r\n\r\n    // Set the date range in the hooks\r\n    setStartDate(initialStartDate);\r\n    setEndDate(initialEndtDate);\r\n\r\n    // Set the date range in local storage\r\n    storeStartDateStateInLocalStorage(initialStartDate);\r\n    storeEndDateStateInLocalStorage(initialEndtDate);\r\n  };\r\n\r\n  const radioButtonHandler = (event) => {\r\n    setRadioSelection(event.target.value);\r\n  };\r\n\r\n  // Filters the array with user defined date range\r\n  const filterDateRange = (list) => {\r\n    return list.filter(\r\n      ([date]) =>\r\n        new Date(date) <= new Date(endDate) &&\r\n        new Date(date) >= new Date(startDate)\r\n    );\r\n  };\r\n\r\n  // Updates the array with selected dates only\r\n  const updateDateRange = () => {\r\n    const updated = filterDateRange(rawCSV);\r\n    storeDateRangeStateInLocalStorage(updated);\r\n    setDateRange(updated);\r\n  };\r\n\r\n  // Whenever csv file changes, store it in local storage\r\n  useEffect(() => {\r\n    storeRawCSVStateInLocalStorage(rawCSV);\r\n\r\n    if (rawCSV) {\r\n      updateDateRange();\r\n    }\r\n  }, [rawCSV]);\r\n\r\n  // Whenever dates change, update the list\r\n  useEffect(() => {\r\n    if (startDate && endDate) {\r\n      updateDateRange();\r\n    }\r\n  }, [startDate, endDate]);\r\n\r\n  // The side effect deciding which way to sort the list based on date range and radio button selection\r\n  useEffect(() => {\r\n    let bullishResponse = { days: 0, started: 'None', ended: 'Didnt' };\r\n    let priceResponse = [];\r\n    let volumeResponse = [];\r\n    let openingResponse = [];\r\n\r\n    if (dateRange) {\r\n      if (radioSelection === 'Bullish') {\r\n        bullishResponse = calculateBullishTrend(dateRange);\r\n        setBullishTrend(bullishResponse);\r\n      }\r\n\r\n      if (radioSelection === 'Volume') {\r\n        volumeResponse = sortByTradingVolume(dateRange);\r\n        setVolumeList(volumeResponse);\r\n      }\r\n\r\n      if (radioSelection === 'Price') {\r\n        priceResponse = sortByPriceChange(dateRange);\r\n        setPriceChangeList(priceResponse);\r\n      }\r\n\r\n      if (radioSelection === 'Opening') {\r\n        openingResponse = sortByOpeningPriceSMA(dateRange);\r\n        if (openingResponse) {\r\n          setOpeningError(false);\r\n          setOpeningList(openingResponse);\r\n        } else {\r\n          setOpeningError(true);\r\n        }\r\n      }\r\n    }\r\n  }, [dateRange, radioSelection]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {!rawCSV && (\r\n        <div>\r\n          <p>Welcome, Scrooge! Open a .csv file to analyze the data</p>\r\n          <p>\r\n            Download stock market data from{' '}\r\n            <a href=\"https://www.nasdaq.com/market-activity/stocks/aapl/historical\">\r\n              NASDAQ\r\n            </a>\r\n          </p>\r\n        </div>\r\n      )}\r\n\r\n      <FileInput handler={fileHandler} />\r\n\r\n      {/* Once a CSV file is loaded, display the rest */}\r\n      {rawCSV && (\r\n        <div>\r\n          <section className=\"dateInputs\">\r\n            <DateInput\r\n              label=\"start\"\r\n              list={rawCSV}\r\n              onChangeHandler={startDateHandler}\r\n              selectedDate={startDate}\r\n            />\r\n            <DateInput\r\n              label=\"end\"\r\n              list={rawCSV}\r\n              onChangeHandler={endDateHandler}\r\n              selectedDate={endDate}\r\n            />\r\n          </section>\r\n          <section>\r\n            {/* Date range has to be set with start date being the same as or before end date */}\r\n            {new Date(startDate) <= new Date(endDate) && dateRange ? (\r\n              <div>\r\n                {/* Selecting which way to sort the data */}\r\n                <RadioSelection handler={radioButtonHandler} />\r\n\r\n                {/* These could be abstracted away to a separate component */}\r\n                {radioSelection === 'Bullish' && bullishTrend && (\r\n                  <div className=\"tableSection\">\r\n                    <p>\r\n                      In Apple stock historical data the Close/Last price\r\n                      increased <b>{bullishTrend.days}</b> days in a row between{' '}\r\n                      <b>{bullishTrend.started}</b> and{' '}\r\n                      <b>{bullishTrend.ended}</b>\r\n                    </p>\r\n                    <Chart dataSet={dateRange} category=\"bullish\" />\r\n                  </div>\r\n                )}\r\n\r\n                {radioSelection === 'Volume' && volumeList.length > 0 && (\r\n                  <div className=\"tableSection\">\r\n                    <p>\r\n                      In Apple stock historical data <b>{volumeList[0][0]}</b>{' '}\r\n                      had the highest trading volume at{' '}\r\n                      <b>{volumeList[0][2]}</b>\r\n                    </p>\r\n                    <Chart dataSet={volumeList} category=\"volume\" />\r\n                  </div>\r\n                )}\r\n\r\n                {radioSelection === 'Price' && priceChangeList.length > 0 && (\r\n                  <div className=\"tableSection\">\r\n                    <p>\r\n                      In Apple stock historical data{' '}\r\n                      <b>{priceChangeList[0][0]}</b> had the highest stock price\r\n                      change within a day at <b>{priceChangeList[0][6]}</b>\r\n                    </p>\r\n                    <Chart dataSet={priceChangeList} category=\"price\" />\r\n                  </div>\r\n                )}\r\n\r\n                {radioSelection === 'Opening' && openingError && (\r\n                  <p style={{ color: 'red' }}>\r\n                    Needs at least a 6-day window selected to calculate SMA-5\r\n                  </p>\r\n                )}\r\n                {radioSelection === 'Opening' &&\r\n                  openingList.length > 0 &&\r\n                  !openingError && (\r\n                    <div className=\"tableSection\">\r\n                      <p>\r\n                        In Apple stock historical data{' '}\r\n                        <b>{openingList[0][0]}</b> had the highest stock price\r\n                        change % compared to simple moving average for the past five days at <b>{openingList[0][6].toFixed(3)} %</b>\r\n                      </p>\r\n                      <Chart dataSet={openingList} category=\"opening\" />\r\n                    </div>\r\n                  )}\r\n              </div>\r\n            ) : (\r\n              <p style={{ color: 'red' }}>Invalid dates selected</p>\r\n            )}\r\n          </section>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}